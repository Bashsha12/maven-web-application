pipeline{
    agent any
    tools{
        maven 'MAVEN' 
        jdk 'JDK17'
    }
    stages{
        stage('Checkout'){
            steps{
                git branch: 'master', url: 'https://github.com/Bashsha12/maven-web-application.git'
            }
        }
        stage('Build'){
            steps{
                sh 'mvn clean package -DskipTests'
            }
            post{
                success{
                    echo 'Build was successful!'
                }
                failure{
                    echo 'Build failed!'
                }
            }
        }
        /*stage('Check Style'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
            post{
                success{
                    echo 'Check Style was successful!'
                }
                failure{
                    echo 'Check Style failed!'
                }
            }
        }*/
        stage('sonarqube'){
            environment{
                scannerhome = tool 'sonar7.1'
            }
            steps{
                echo 'SonarQube analysis started...'
                withSonarQubeEnv('sonarsever') {
                    sh '''$scannerhome/bin/sonar-scanner -Dsonar.projectKey=maven-web-application \
                    -Dsonar.projectName=maven-web-application \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/classes \
                    -Dsonar.junit.reportPath=target/surefire-reports \
                    -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPath=target/checkstyle-result.xml \
                    '''
                }

            }
        }
        stage('Quality Gate'){
            steps{
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
            post {
                success {
                    echo 'Quality Gate passed!'
                }
                failure {
                    echo 'Quality Gate failed!'
                }
            }
        }
        stage('Upload to Nexus'){
            steps{
                nexusArtifactUploader artifacts: [[artifactId: 'maven-web-application', classifier: '', file: 'target/maven-web-application.war', type: 'war']], 
                credentialsId: 'nexuslogin', 
                nexusUrl: '172.31.41.195:8081', 
                nexusVersion: 'nexus3', 
                protocol: 'http', 
                repository: 'maven-web-application', 
                version: '${env.BUILD_NUMBER}'
                echo 'Artifact uploaded to Nexus!'
            }
        }
        
    }
}